        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <time.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:#define RANDOM_TEST "smithy"
        -:   10:#define ITERATIONS 10000
        -:   11:
function main called 1 returned 100% blocks executed 85%
        1:   12:int main() {
        -:   13:
        1:   14:   printf("\nStarting Random Test 2: %s\n", RANDOM_TEST);
call    0 returned 100%
        -:   15:
        -:   16:   struct gameState G;
        1:   17:   int k[10] = {minion, smithy, gardens, tribute, baron, adventurer, cutpurse, mine, embargo, outpost};
        1:   18:   int i, player = 0, cardEffect_fail = 0, compareCount_fail = 0, deckCount_fail = 0, victoryCount_fail = 0;
        1:   19:   srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   20:
    10001:   21:   for(i = 0; i < ITERATIONS; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   22:      struct gameState testG;
        -:   23:
        -:   24:      // randomize pre-game info
    10000:   25:      int rand_players = (rand() % (MAX_PLAYERS - 1) + 2);
call    0 returned 100%
    10000:   26:      int rand_deckCount = (rand() % (MAX_DECK - 2) + 3);
call    0 returned 100%
    10000:   27:      int rand_handCount = (rand() % (MAX_HAND - 4) + 5);
call    0 returned 100%
    10000:   28:      int rand_seed = 1000;
        -:   29:
        -:   30:      // initialize the game
    10000:   31:      initializeGame(rand_players, k, rand_seed, &G);
call    0 returned 100%
        -:   32:
        -:   33:      // randomize game info
    10000:   34:      player = rand() % rand_players;
call    0 returned 100%
    10000:   35:      G.whoseTurn = player;
    10000:   36:      G.deckCount[player] = rand_deckCount;
    10000:   37:      G.handCount[player] = rand_handCount;
        -:   38:
        -:   39:
        -:   40:      // copy game info to testG
    10000:   41:      memcpy(&testG, &G, sizeof(struct gameState));
        -:   42:
    10000:   43:      testG.hand[player][testG.handCount[player]] = smithy;
    10000:   44:      testG.handCount[player]++;
        -:   45:
        -:   46:      // run cardEffect() w/ testG
    10000:   47:      int result = cardEffect(smithy, 0, 0, 0, &testG, 0, 0);
call    0 returned 100%
        -:   48:
        -:   49:      // check if cardEffect() failed
    10000:   50:      if(result == -1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   51:         cardEffect_fail++;
        -:   52:      }
        -:   53:
        -:   54:      // check to see if +3 cards in testG vs G
    10000:   55:      if(G.handCount[player] + 3 == testG.handCount[player]) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:   56:         ; // do nothing
        -:   57:      }
        -:   58:      else {
        4:   59:         compareCount_fail++;
        -:   60:      }
        -:   61:
        -:   62:      // check to see if testG.deckCount is less than G.rand_deckCount
    10000:   63:      if(testG.deckCount[player] < G.deckCount[player]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   64:         ; // do nothing
        -:   65:      }
        -:   66:      else {
    #####:   67:         deckCount_fail++;
        -:   68:      }
        -:   69:
        -:   70:      // check to see if 0 victory cards are pulled from supply count
    10000:   71:      if((G.supplyCount[estate] == testG.supplyCount[estate]) && (G.supplyCount[province] == testG.supplyCount[province]) && (G.supplyCount[duchy] == testG.supplyCount[duchy])) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:   72:         ; // do nothing
        -:   73:      }
        -:   74:      else {
    #####:   75:         victoryCount_fail++;
        -:   76:      }
        -:   77:   }
        -:   78:
        -:   79:   // print results
        1:   80:   if(cardEffect_fail == 0 && compareCount_fail == 0 && victoryCount_fail == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:   81:      printf("All tests passed!\n");
call    0 never executed
        -:   82:   }
        -:   83:   else {
        1:   84:      printf("Some test(s) have failed!\n");
call    0 returned 100%
        -:   85:   }
        1:   86:   printf("CardEffect() failed %d times out of %d iterations.\n", cardEffect_fail, ITERATIONS);
call    0 returned 100%
        1:   87:   printf("testG.handCount +3 cards vs G.handCount failed %d times out of %d iterations.\n", compareCount_fail, ITERATIONS);
call    0 returned 100%
        1:   88:   printf("testG.deckCount less than G.deckCount failed %d times out of %d iterations.\n", deckCount_fail, ITERATIONS);
call    0 returned 100%
        1:   89:   printf("0 victory cards pulled from supply count failed %d times out of %d iterations.\n", victoryCount_fail, ITERATIONS);
call    0 returned 100%
        -:   90:
        1:   91:   return 0;
        -:   92:
        -:   93:}
